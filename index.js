let config = require('./config'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
let token = config.token; // ¬´–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º¬ª –∏–∑ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω
let prefix = config.prefix; // ¬´–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º¬ª –∏–∑ –Ω–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å robot

const comms = require("./comms"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –±–æ—Ç–∞
const fs = require('fs'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ–¥–Ω–æ–π –º–æ–¥—É–ª—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã node.js  
const { Client, Intents } = require('discord.js');
const robot = new Client({ intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] });
const { MessageEmbed } = require('discord.js');
const { Permissions } = require('discord.js');

robot.on('messageDelete', async (message) => {
  const logs = message.guild.channels.cache.find(channel => channel.name === "logs");
  if (message.guild.me.permissions.has(Permissions.FLAGS.MANAGE_CHANNELS) && !logs) {
    message.guild.channels.create('logs', { type: 'text' });
  }
  if (!message.guild.me.permissions.has(Permissions.FLAGS.MANAGE_CHANNELS) && !logs) { 
    console.log('The logs channel does not exist and tried to create the channel but I am lacking permissions')
  }  
  if (!message.guild) return;
	const fetchedLogs = await message.guild.fetchAuditLogs({
		limit: 1,
		type: 'MESSAGE_DELETE',
	});
	// Since there's only 1 audit log entry in this collection, grab the first one
	const deletionLog = fetchedLogs.entries.first();

	// Perform a coherence check to make sure that there's *something*
	if (!deletionLog) return logs.send(`A message by ${message.author.tag} was deleted, but no relevant audit logs were found.`);

	// Now grab the user object of the person who deleted the message
	// Also grab the target of this action to double-check things
	const { executor, target } = deletionLog;

	// Update the output with a bit more information
	// Also run a check to make sure that the log returned was for the same author's message
	if (target.id === message.author.id) {
		logs.send(`A message by ${message.author.tag} was deleted by ${executor.tag}.`);
	} else {
	  logs.send(`A message by ${message.author.tag} was deleted, but we don't know by who.`);
	}
})

process.on('unhandledRejection', error => {
    console.error('–û—à–∏–±–∫–∞ API', error);
    robot.channels.cache.get("889131803036762152").send("–û—à–∏–±–∫–∞ API –±–æ—Ç–∞: " + error)
});

robot.on('ready', () => {
  console.log(robot.user.username + " –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!");
  robot.user.setPresence({ activities: [{ name: '–ù–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ KVIT' }] });
});

robot.on('messageCreate', message => {
  if(message.content === "+ping") {
    const embed = new MessageEmbed()
     .setDescription(`**üèì My ping is : **\`${Math.round(robot.ws.ping)}ms\``)
    message.channel.send({ embeds: [embed] });
  } 
  if(message.content == "–ø—Ä–∏–≤–µ—Ç") {
    message.reply("–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—Ç–æ—Ä–∞ —Ö–∞—É—Å–∞? –ù–µ—Ç? –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏ - https://house-doc.ru/")
  }
  if(message.content == "–ö—É") {
    message.reply("–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—Ç–æ—Ä–∞ —Ö–∞—É—Å–∞? –ù–µ—Ç? –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏ - https://house-doc.ru/")
  } 
  if(message.content == "Hello") {
    message.reply("–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—Ç–æ—Ä–∞ —Ö–∞—É—Å–∞? –ù–µ—Ç? –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏ - https://house-doc.ru/")
  } 
  if(message.content == "Hi") {
    message.reply("–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—Ç–æ—Ä–∞ —Ö–∞—É—Å–∞? –ù–µ—Ç? –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏ - https://house-doc.ru/")
  }
  if(message.content == "–î–∞—Ä–æ–≤–∞") {
    message.reply("–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—Ç–æ—Ä–∞ —Ö–∞—É—Å–∞? –ù–µ—Ç? –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏ - https://house-doc.ru/")
  }
  if(message.content == "–•–∞–π") {
    message.reply("–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—Ç–æ—Ä–∞ —Ö–∞—É—Å–∞? –ù–µ—Ç? –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏ - https://house-doc.ru/")
  }
  if(message.content == "–ó–¥–∞—Ä–æ–≤–∞") {
    message.reply("–ü—Ä–∏–≤–µ—Ç! –ê —Ç—ã —Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—Ç–æ—Ä–∞ —Ö–∞—É—Å–∞? –ù–µ—Ç? –ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–∏ - https://house-doc.ru/")
  }  
  if(message.content == "–î–æ–∫—Ç–æ—Ä –•–∞—É—Å") {
    message.reply("@KVIT#0777 –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º")
  }   
  if(message.content == "+sorry") {
    message.channel.send("–î–∞...")
}});

robot.on('messageCreate', message => {
  if (message.author.username != robot.user.username && message.author.discriminator != robot.user.discriminator) {
    var comm = message.content.trim() + " ";
    var comm_name = comm.slice(0, comm.indexOf(" "));
    var messArr = comm.split(" ");
    for (comm_count in comms.comms) {
      var comm2 = prefix + comms.comms[comm_count].name;
      if (comm2 == comm_name) {
        comms.comms[comm_count].out(robot, message, messArr);
      }
    }
}
});

require('./server')();
robot.login(token); // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞